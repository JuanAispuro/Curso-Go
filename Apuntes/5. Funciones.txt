 -- 5.1 Funciones --
 Func es lo reservado, el nombre y parentesis de lo que se ocupe.
 Pero para imprimirla tenemos que poner la funci√≥n en el main pero sin punto.
 Tipo hello()
    func main() {
        hello()
    }

    func hello(){
        fmt.Println("Hello Edteam")
    }

-- 5.2 Funciones con par√°metros por valor y por referencia --
Tenemos que dar el nombre del parametro y el tipo de valor.
    func main() {
        hello("Juan", "Aispuro")
        emoji := "üòé"
        change(&emoji)
        fmt.Println(emoji)
    }

    func hello(firstName string, lastName string){
        fmt.Println("Hello",firstName,lastName)
    }
    //Recibira un valor y lo cambiara
    //Funcion que recibe parametro a base por valor.

        /*func Change(value string){
        value = "üòÇ"
        }
        */

    //funcion que recibe parametro a base por referencia
    //Ponemos un puntero y ocuparemos el valor de ampersand (&)
    func change(value *string){
        *value = "üòÇ"
    }

-- 5.3 Funciones con return --
    func main() {
        total := sum(4, 7)
        fmt.Println(total)
    }

    func sum(num1 int, num2 int) int {
        return num1 + num2
    }

--5.4 Retorno de m√∫ltiples valors --

import (
	"fmt"
	"strings"
)

func main() {
	texto := "JuAn ArMANdo"
	miusc,mayusc := convert(texto)
	fmt.Println(miusc,mayusc)
}

func convert(text string) (string, string) {
	//Primero mayusculas luego minusculas
	min := strings.ToLower(text)
	may := strings.ToUpper(text)
	return min, may
}

-- 5.5 Controlar Errores --
import (
	"fmt"
	"errors"
	//"strings"
)

func main() {
	
	/*	llamar paquete ioutil con leer archivo.
		Devuelve el contenido que lee o el error.
		content, err := ioutil.ReadFile("archivo.txt")
		La funci√≥n no lee por lo que se imprime ocurrio el error y el contenido
		del error.

			content, err := ioutil.ReadFile("archivo.txt")
			if err != nil {
				fmt.Printf("Ocurrio un error: %v", err)
				return Para que finalice el programa, por lo que no sera necesario eusar el else
			}
			fmt.Println("El contenido es: %v", string(content))
	*/
	//resultado y error.
	result, err := division(10,0)
	if err != nil {
		fmt.Printf("Ocurrio un error: %v", err)
		return 
	}
	fmt.Println(result)
}

//Propia funcion para que retorne un error.
func division (dividendo, divisor int) (result int, err error) {
	if divisor == 0{
		err = errors.New("No puedes dividir por cero.")
		return
	}
	result = dividendo / divisor
	return 
}

 -- 5.6 Funciones que reciben y retornan funciones --
 /*
		nums := []int {1,4,70,5,67,90,2}
		//filter devuelva los numeros menores o iguales a 10.
		result := filter(nums,func(num int) bool {
			if num >=10 {
				return true
			}
			return false
		})
		fmt.Println(result)
	*/
	x := hello ("Juan")
	fmt.Println(x("Aispuro"))
}
	func hello(name string) func(string)string {
		return func(text string) string {
			return "Hello " + name + " " + text
		}
	}

	/*
	//slice de enteros, la funcion y un slice de enteros(el filtrado)
	func filter(nums []int, callback func(int) bool) []int {
		result := []int{}
		//for indice valor.
		for _,v := range nums {
			//llamamamos funcion callback con el valor. 
			callback(v)
			//retorna un booleano.
			if callback(v) {
				result = append(result, v)//agregamos el numero
			}
			//sino pues no se hace.
		}
		return result
	}
	*/

-- 5.7 Funciones variaticas --
func main() {
	fmt.Println(sum(1,2,6,3,6))
}

// Con esto se puede pasar un numero indefinido de parametros (funcion variatica).
func sum(nums ...int) int {
	total := 0

	for _, v := range nums {
		total += v
	}
	return total
}

 -- 5.8 Funciones anonimas --
 puedes ponerle a una variable la funcion anonima y solo seria como: 
    x := func() {
		fmt.Println("Hello EDteam")
	}
	x()
 o tambien se puede gracias a las [funci√≥n anonima autoejecutada]
 func() {
		fmt.Println("Hello EDteam")
	}()
Tambien se le pueden mandar parametos como en el ejemplo:
    func(text string) {
            fmt.Println("Hello ",text)
        }("There!")
